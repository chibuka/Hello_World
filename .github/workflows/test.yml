name: Hello World Challenge Grader
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  TEMPLATE_OWNER: "chibuka"
  TEMPLATE_REPO: "Hello_World"
  BACKEND_URL: "https://nine5-ajdi.onrender.com"

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      level: ${{ steps.levels.outputs.current }}
      passed: ${{ steps.test_result.outputs.passed }}
    env:
      PYTHONUNBUFFERED: "1"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Notify workflow started
        run: |
          curl -X POST "${{ env.BACKEND_URL }}/api/submissions/status_update" \
            -H "Authorization: Bearer ${{ secrets.WEBHOOK_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "user": "${{ github.actor }}",
              "challenge_type": "hello_world",
              "status": "in_progress",
              "message": "üöÄ Workflow started - Setting up environment",
              "github_run_id": "${{ github.run_id }}"
            }' || echo "Status update failed, continuing..."
      
      - name: Determine current level
        id: levels
        run: |
          # Fetch the user's current level from the database
          CURRENT=$(curl -s -X GET "${{ env.BACKEND_URL }}/api/users/${{ github.actor }}/progress?challenge_id=3f8a1b2c-9d4e-4f5a-8b1c-2d3e4f5a6b7c" \
            -H "Authorization: Bearer ${{ secrets.WEBHOOK_TOKEN }}" \
            -H "Content-Type: application/json" | jq -r '.current_level')

          # Default to 1 if no progress is found
          if [ "$CURRENT" == "null" ] || [ -z "$CURRENT" ]; then
            CURRENT=1
          fi

          # Convert the integer level to the folder name format (e.g., 1 -> level_01)
          FOLDER_NAME=$(printf "level_%02d" $CURRENT)

          echo "current=$FOLDER_NAME" >> $GITHUB_OUTPUT
          echo "Current level: $FOLDER_NAME"
      
      - name: Notify dependencies installation
        run: |
          curl -X POST "${{ env.BACKEND_URL }}/api/submissions/status_update" \
            -H "Authorization: Bearer ${{ secrets.WEBHOOK_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "user": "${{ github.actor }}",
              "challenge_type": "hello_world",
              "status": "in_progress",
              "message": "üì¶ Installing dependencies...",
              "github_run_id": "${{ github.run_id }}"
            }' || echo "Status update failed, continuing..."
      
      - name: Install dependencies and run tests
        id: test_result
        run: |
          pip install -U pip pytest
          
          # Notify that tests are starting
          curl -X POST "${{ env.BACKEND_URL }}/api/submissions/status_update" \
            -H "Authorization: Bearer ${{ secrets.WEBHOOK_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "user": "${{ github.actor }}",
              "challenge_type": "hello_world",
              "status": "in_progress",
              "message": "üß™ Running tests for ${{ steps.levels.outputs.current }}...",
              "github_run_id": "${{ github.run_id }}"
            }' || echo "Status update failed, continuing..."
          
          if pytest -q tests/${{ steps.levels.outputs.current }} --tb=short; then
            echo "passed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Tests passed!"
            
            # Notify tests passed
            curl -X POST "${{ env.BACKEND_URL }}/api/submissions/status_update" \
              -H "Authorization: Bearer ${{ secrets.WEBHOOK_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                "user": "${{ github.actor }}",
                "challenge_type": "hello_world",
                "status": "in_progress",
                "message": "‚úÖ Tests passed! Processing results...",
                "github_run_id": "${{ github.run_id }}"
              }' || echo "Status update failed, continuing..."
          else
            echo "passed=false" >> $GITHUB_OUTPUT
            echo "‚ùå Tests failed!"
            
            # Notify tests failed
            curl -X POST "${{ env.BACKEND_URL }}/api/submissions/status_update" \
              -H "Authorization: Bearer ${{ secrets.WEBHOOK_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                "user": "${{ github.actor }}",
                "challenge_type": "hello_world",
                "status": "failed",
                "message": "‚ùå Tests failed",
                "github_run_id": "${{ github.run_id }}"
              }' || echo "Status update failed, continuing..."
            exit 1
          fi

  unlock_next_level:
    needs: test
    if: ${{ needs.test.outputs.passed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Determine next level
        id: levels
        run: |
          CURRENT="${{ needs.test.outputs.level }}"
          NUM=${CURRENT#*_}
          NEXT_NUM=$((10#$NUM + 1))
          NEXT=$(printf "level_%02d" $NEXT_NUM)
          echo "next_level=$NEXT" >> $GITHUB_OUTPUT
          echo "Next level: $NEXT"
      
      - name: Notify level progression
        run: |
          curl -X POST "${{ env.BACKEND_URL }}/api/submissions/status_update" \
            -H "Authorization: Bearer ${{ secrets.WEBHOOK_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "user": "${{ github.actor }}",
              "challenge_type": "hello_world",
              "status": "in_progress",
              "message": "üéâ Unlocking next level: ${{ steps.levels.outputs.next_level }}",
              "github_run_id": "${{ github.run_id }}"
            }' || echo "Status update failed, continuing..."

      - name: Notify platform about next level
        run: |
          echo "Next level unlocked: ${{ steps.levels.outputs.next_level }}"

  notify:
    needs: [test, unlock_next_level]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify platform
        run: |
          # Extract repo owner and name
          REPO_OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          
          # Determine if next level was unlocked
          NEXT_UNLOCKED="false"
          if [[ "${{ needs.unlock_next_level.result }}" == "success" ]]; then
            NEXT_UNLOCKED="true"
          fi
          
          # Get challenge type from repo name (Hello_World -> hello_world)
          CHALLENGE_TYPE=$(echo "$REPO_NAME" | tr '[:upper:]' '[:lower:]')
          
          # Debugging the variables
          echo "User: ${{ github.actor }}"
          echo "Repo Owner: $REPO_OWNER"
          echo "Repo Name: $REPO_NAME"
          echo "Repository: ${{ github.repository }}"
          echo "Challenge Type: $CHALLENGE_TYPE"
          echo "Level: ${{ needs.test.outputs.level }}"
          echo "Status: ${{ needs.test.result }}"
          echo "Tests Passed: ${{ needs.test.outputs.passed }}"
          echo "Commit: ${{ github.sha }}"
          echo "Commit Message: ${{ github.event.head_commit.message }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Event Type: ${{ github.event_name }}"
          echo "Next Level Unlocked: $NEXT_UNLOCKED"
          echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          
          # Final status notification
          if [[ "${{ needs.test.outputs.passed }}" == "true" ]]; then
            curl -X POST "${{ env.BACKEND_URL }}/api/submissions/status_update" \
              -H "Authorization: Bearer ${{ secrets.WEBHOOK_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                "user": "${{ github.actor }}",
                "challenge_type": "'$CHALLENGE_TYPE'",
                "status": "completed",
                "message": "üéâ Challenge completed successfully!",
                "github_run_id": "${{ github.run_id }}",
                "tests_passed": true
              }' || echo "Status update failed, continuing..."
          else
            curl -X POST "${{ env.BACKEND_URL }}/api/submissions/status_update" \
              -H "Authorization: Bearer ${{ secrets.WEBHOOK_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                "user": "${{ github.actor }}",
                "challenge_type": "'$CHALLENGE_TYPE'",
                "status": "failed",
                "message": "‚ùå Challenge failed",
                "github_run_id": "${{ github.run_id }}",
                "tests_passed": false
              }' || echo "Status update failed, continuing..."
          fi
          
          # Execute the final webhook for progress tracking
          curl -X POST "${{ env.BACKEND_URL }}/api/submissions/submission_webhook" \
            -H "Authorization: Bearer ${{ secrets.WEBHOOK_TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "X-GitHub-Event: ${{ github.event_name }}" \
            -d '{
              "user": "${{ github.actor }}",
              "repo_owner": "'$REPO_OWNER'",
              "repo_name": "'$REPO_NAME'", 
              "repo": "${{ github.repository }}",
              "challenge_type": "'$CHALLENGE_TYPE'",
              "level": "${{ needs.test.outputs.level }}",
              "status": "${{ needs.test.result }}",
              "tests_passed": "${{ needs.test.outputs.passed }}",
              "commit": "${{ github.sha }}",
              "commit_message": "${{ github.event.head_commit.message }}",
              "branch": "${{ github.ref_name }}",
              "event_type": "${{ github.event_name }}",
              "next_level_unlocked": "'$NEXT_UNLOCKED'",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
            }' || echo "Webhook notification failed, continuing..."
